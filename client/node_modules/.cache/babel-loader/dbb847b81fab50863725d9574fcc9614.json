{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\crypto-fervor\\\\crypto-fervor\\\\src\\\\components\\\\CryptoItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\"; // const data = [\n//   {\n//     id: \"bitcoin\",\n//     rank: \"1\",\n//     symbol: \"BTC\",\n//     name: \"Bitcoin\",\n//     priceUsd: \"6929.8217756835584756\",\n//   },\n//   {\n//     id: \"ethereum\",\n//     rank: \"2\",\n//     symbol: \"ETH\",\n//     name: \"Ethereum\",\n//     priceUsd: \"404.9774667045200896\",\n//   },\n//   {\n//     id: \"ripple\",\n//     rank: \"3\",\n//     symbol: \"XRP\",\n//     name: \"XRP\",\n//     priceUsd: \"0.4202870472643482\",\n//   },\n//   {\n//     id: \"bitcoin-cash\",\n//     rank: \"4\",\n//     symbol: \"BCH\",\n//     name: \"Bitcoin Cash\",\n//     priceUsd: \"688.8617162705108413\",\n//   },\n//   {\n//     id: \"eos\",\n//     rank: \"5\",\n//     symbol: \"EOS\",\n//     name: \"EOS\",\n//     priceUsd: \"6.9823147841833210\",\n//   },\n//   {\n//     id: \"stellar\",\n//     rank: \"6\",\n//     symbol: \"XLM\",\n//     name: \"Stellar\",\n//     priceUsd: \"0.2341611226032443\",\n//   },\n//   {\n//     id: \"litecoin\",\n//     rank: \"7\",\n//     symbol: \"LTC\",\n//     name: \"Litecoin\",\n//     priceUsd: \"73.3479339685586096\",\n//   },\n//   {\n//     id: \"cardano\",\n//     rank: \"8\",\n//     symbol: \"ADA\",\n//     name: \"Cardano\",\n//     priceUsd: \"0.1289256506716951\",\n//   },\n//   {\n//     id: \"tether\",\n//     rank: \"9\",\n//     symbol: \"USDT\",\n//     name: \"Tether\",\n//     priceUsd: \"1.0009115584940656\",\n//   },\n//   {\n//     id: \"iota\",\n//     rank: \"10\",\n//     symbol: \"MIOTA\",\n//     name: \"IOTA\",\n//     priceUsd: \"0.8647409095440071\",\n//   },\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CryptoItem() {\n  _s();\n\n  const [items, setItems] = useState([]);\n  useEffect(() => {\n    fetch(\"https://api.coincap.io/v2/assets\").then(res => res.json()).then(result => {\n      //   setIsLoaded(true);\n      setItems(result);\n    } // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    // (error) => {\n    //   setIsLoaded(true);\n    //   setError(error);\n    // }\n    );\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"rank\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"name and symbol\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n        children: \"price\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 1\n    }, this), items.data.map(item => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.rank\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: `${item.name} ${item.symbol}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: [item.priceUsd, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 1\n  }, this);\n}\n\n_s(CryptoItem, \"E85yb7BhBnl3/OpymRdjFiQJ97s=\");\n\n_c = CryptoItem;\nexport default CryptoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoItem\");","map":{"version":3,"sources":["C:/react/crypto-fervor/crypto-fervor/src/components/CryptoItem.js"],"names":["React","useEffect","useState","CryptoItem","items","setItems","fetch","then","res","json","result","data","map","item","rank","name","symbol","priceUsd"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAGA,SAASC,UAAT,GAAuB;AAAA;;AAEnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,EAAD,CAAlC;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,KAAK,CAAC,kCAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACZ;AACEL,MAAAA,QAAQ,CAACK,MAAD,CAAR;AACD,KANL,CAOI;AACA;AACA;AACA;AACA;AACA;AACA;AAbJ;AAeD,GAhBM,EAgBJ,EAhBI,CAAT;AAsBA,sBACJ;AAAA,4BACA;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,EAOIN,KAAK,CAACO,IAAN,CAAWC,GAAX,CAAiBC,IAAD,iBAChB;AAAA,8BACA;AAAA,kBAAKA,IAAI,CAACC;AAAV;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAA,kBAAM,GAAED,IAAI,CAACE,IAAK,IAAGF,IAAI,CAACG,MAAO;AAAjC;AAAA;AAAA;AAAA;AAAA,cAFA,eAGA;AAAA,mBAAKH,IAAI,CAACI,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA,cAHA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,CAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADI;AAsBH;;GAjDQd,U;;KAAAA,U;AAoDT,eAAeA,UAAf","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\n\r\n// const data = [\r\n//   {\r\n//     id: \"bitcoin\",\r\n//     rank: \"1\",\r\n//     symbol: \"BTC\",\r\n//     name: \"Bitcoin\",\r\n//     priceUsd: \"6929.8217756835584756\",\r\n//   },\r\n//   {\r\n//     id: \"ethereum\",\r\n//     rank: \"2\",\r\n//     symbol: \"ETH\",\r\n//     name: \"Ethereum\",\r\n//     priceUsd: \"404.9774667045200896\",\r\n//   },\r\n//   {\r\n//     id: \"ripple\",\r\n//     rank: \"3\",\r\n//     symbol: \"XRP\",\r\n//     name: \"XRP\",\r\n//     priceUsd: \"0.4202870472643482\",\r\n//   },\r\n//   {\r\n//     id: \"bitcoin-cash\",\r\n//     rank: \"4\",\r\n//     symbol: \"BCH\",\r\n//     name: \"Bitcoin Cash\",\r\n//     priceUsd: \"688.8617162705108413\",\r\n//   },\r\n//   {\r\n//     id: \"eos\",\r\n//     rank: \"5\",\r\n//     symbol: \"EOS\",\r\n//     name: \"EOS\",\r\n//     priceUsd: \"6.9823147841833210\",\r\n//   },\r\n//   {\r\n//     id: \"stellar\",\r\n//     rank: \"6\",\r\n//     symbol: \"XLM\",\r\n//     name: \"Stellar\",\r\n//     priceUsd: \"0.2341611226032443\",\r\n//   },\r\n//   {\r\n//     id: \"litecoin\",\r\n//     rank: \"7\",\r\n//     symbol: \"LTC\",\r\n//     name: \"Litecoin\",\r\n//     priceUsd: \"73.3479339685586096\",\r\n//   },\r\n//   {\r\n//     id: \"cardano\",\r\n//     rank: \"8\",\r\n//     symbol: \"ADA\",\r\n//     name: \"Cardano\",\r\n//     priceUsd: \"0.1289256506716951\",\r\n//   },\r\n//   {\r\n//     id: \"tether\",\r\n//     rank: \"9\",\r\n//     symbol: \"USDT\",\r\n//     name: \"Tether\",\r\n//     priceUsd: \"1.0009115584940656\",\r\n//   },\r\n//   {\r\n//     id: \"iota\",\r\n//     rank: \"10\",\r\n//     symbol: \"MIOTA\",\r\n//     name: \"IOTA\",\r\n//     priceUsd: \"0.8647409095440071\",\r\n//   },\r\n// ];\r\n\r\n\r\nfunction CryptoItem () {\r\n    \r\n    const [items, setItems] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.coincap.io/v2/assets\")\r\n          .then(res => res.json())\r\n          .then(\r\n            (result) => {\r\n            //   setIsLoaded(true);\r\n              setItems(result);\r\n            },\r\n            // Note: it's important to handle errors here\r\n            // instead of a catch() block so that we don't swallow\r\n            // exceptions from actual bugs in components.\r\n            // (error) => {\r\n            //   setIsLoaded(true);\r\n            //   setError(error);\r\n            // }\r\n          )\r\n      }, [])\r\n\r\n\r\n\r\n\r\n\r\n    return(\r\n<div>\r\n<tr>\r\n    <th>rank</th>\r\n    <th>name and symbol</th>\r\n    <th>price</th>\r\n</tr>\r\n{\r\n    items.data.map ((item) =>\r\n    <tr>\r\n    <td>{item.rank}</td>\r\n    <td>{`${item.name} ${item.symbol}`}</td>\r\n    <td>{item.priceUsd} </td>\r\n</tr>\r\n    )\r\n}\r\n\r\n\r\n\r\n</div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default CryptoItem; \r\n"]},"metadata":{},"sourceType":"module"}